#include <bits/stdc++.h>

/* Дано невзвешенное дерево. Расстоянием между двумя вершинами будем называть
 * количество ребер в пути, соединяющем эти две вершины.
 * Для каждой вершины определите сумму расстояний до всех остальных вершин.
 * Время работы должно быть O(n).
 *
 * Доказательство асимптотики: ввод - O(n); dfs - O(n + m), причем m = n - 1,
 * т.е. dfs - О(2n) = O(n); подсчет ответа - O(n). Итого, O(n).
 *
 * Алгоритм и его доказательство: предпосчитаем для каждой вершины сумму расстояний
 * до вершин в ее поддереве. Заметим, что тогда для корня ответ уже вычислен.
 * Т.к. номер вершины предка всегда меньше, чем номер вершины ребенка
 * в подсчете ответа для некоторой вершины ответ для её предка уже посчитан.
 * Пересчет ответа для вершины основан на том, что расстояния от неё самой до
 * вершин в её поддереве отличаются от расстояний до её предка ровно на соединяющее
 * ребро, а значит, что для всех верщин в поддереве мы лишний раз посчитали это ребро.
 * Для остальных вершин наоборот нехватает этого ребра из сына в предка, а значит,
 * т.к. для каждой вершины не из поддерева текущей до правильного расстояния не хватает
 * 1 ребра - добавим его.
 */

using namespace std;

long long int dfs(int v, vector<int>& sub_vertex_count, vector<vector<int> >& g) {
    int dist = 0;
    for (auto u : g[v]) {
        dist += dfs(u, sub_vertex_count, g) + sub_vertex_count[u];
        sub_vertex_count[v] += sub_vertex_count[u];
    }
    ++sub_vertex_count[v];
    return dist;
}

int main() {
    // Ввод данных
    int n;
    cin >> n;

    vector<vector<int> > g(n);
    vector<int> prev(n);
    int a, b;
    for (int i = 0; i < n - 1; i++) {
        cin >> a >> b;
        if (a > b)
            swap(a, b);
        g[a].push_back(b);
        prev[b] = a;
    }

    // Предподсчет расстояния и количества вершин
    vector<int> sub_vertex_count (n, 0);
    vector<long long int> sub_vertex_dist (n, 0);

    // Нахождение ответа по описанному алгоритму и вывод ответа
    vector<long long int> dist(n);
    dist[0] = dfs(0, sub_vertex_count, g);
    cout << dist[0] << endl;

    for (int v = 1; v < n; ++v) {
        dist[v] = dist[prev[v]] - sub_vertex_count[v] + (n - sub_vertex_count[v]);
        cout << dist[v] << endl;
    }

    return 0;
}
